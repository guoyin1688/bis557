X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
n <- 200
p <- 4
N <- 500
M <- 20
beta <- c(1, -1, 0.5, 0)
mu <- rep(0, p)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X <- MASS::mvrnorm(n, mu, Sigma)
y <- X %*% beta + rnorm(n, sd = 5)
X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
n <- 200
p <- 4
N <- 500
M <- 20
beta <- c(1, -1, 0.5, 0)
mu <- rep(0, p)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X <- MASS::mvrnorm(n, mu, Sigma)
y <- X %*% beta + rnorm(n, sd = 5)
X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
n <- 200
p <- 4
N <- 500
M <- 20
beta <- c(1, -1, 0.5, 0)
mu <- rep(0, p)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X <- MASS::mvrnorm(n, mu, Sigma)
y <- X %*% beta + rnorm(n, sd = 5)
X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
n <- 200
p <- 4
N <- 500
M <- 20
beta <- c(1, -1, 0.5, 0)
mu <- rep(0, p)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X <- MASS::mvrnorm(n, mu, Sigma)
y <- X %*% beta + rnorm(n, sd = 5)
X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
n <- 200
p <- 4
N <- 500
M <- 20
beta <- c(1, -1, 0.5, 0)
mu <- rep(0, p)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X <- MASS::mvrnorm(n, mu, Sigma)
y <- X %*% beta + rnorm(n, sd = 5)
X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
n <- 200
p <- 4
N <- 500
M <- 20
beta <- c(1, -1, 0.5, 0)
mu <- rep(0, p)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X <- MASS::mvrnorm(n, mu, Sigma)
y <- X %*% beta + rnorm(n, sd = 5)
X_test <- MASS::mvrnorm(n, mu, Sigma)
y_test <- X_test %*% beta + rnorm(n, sd = 5)
y_test <- as.numeric(y_test)
# Inputs: X a numeric design matrix; y, numeric vector;
# lambda, a sequence of penalty terms
# Output: a matrix of regression vectors with with ncol(X) columns and
# length(lambda_vals) rows
ridge_reg <- function(X, y, lambda_vals) {
svd_obj <- svd(X)
U <- svd_obj[["u"]]
V <- svd_obj[["v"]]
svals <- svd_obj[["d"]]
k <- length(lambda_vals)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
for (j in seq_len(k)) {
D <- diag(svals / (svals ^ 2 + lambda_vals[j]))
ridge_beta[j, ] <- V %*% D %*% t(U) %*% y
}
return(ridge_beta)
}
lambda_vals <- seq(0, n*2, length.out = N)
beta_mat <- ridge_reg(X, y, lambda_vals)
y_hat <- tcrossprod(X_test, beta_mat)
mse <- apply((y_hat - y_test)^2, 2, mean)
lambda_vals[which.min(mse)]
x <- 1:10
poly_5 <- cbind(1/10, poly(x, n = 5))
crossprod(poly_5)
?poly
poly_5 %*% solve(crossprod(poly_5)) %*% t(poly_5)
poly_5
x_poly <- outer(x, 0L:degree, "^")
degree <- 5
x_poly <- outer(x, 0L:degree, "^")
x_poly
x_poly %*% solve(crossprod(x_poly)) %*% t(x_poly)
crossprod(x_poly)
crossprod(poly_5)
poly_5 %*% solve(crossprod(poly_5)) %*% t(poly_5)
?solve
xr %*% solve(crossprod(xr)) %*% t(xr)
QR <- qr(x_poly)
Q <- qr.Q(QR)
R <- qr.R(QR)
xr <- x_poly %*% solve(R)
xr %*% solve(crossprod(xr)) %*% t(xr)
dir.create("../data")
lm_patho <- read.csv("df.csv")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
save(lm_patho, file = "../data/lm_patho.rda")
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
setwd("~/Documents/Yale/BIS557/bis557/data-raw")
dir.create("../data")
lm_patho <- read.csv("df.csv")
ridge_train <- read.csv("ridge_train.csv")
ridge_test <- read.csv("ridge_test.csv")
save(lm_patho, file = "../data/lm_patho.rda")
save(ridge_train, file = "../data/ridge_train.rda")
save(ridge_test, file = "../data/ridge_test.rda")
setwd("~/Documents/Yale/BIS557/bis557/R")
library(bis557)
data(ridge_train)
data(ridge_test)
setwd("~/Documents/Yale/BIS557/bis557")
library(bis557)
data(ridge_train)
data(ridge_test)
setwd("~/Documents/Yale/BIS557")
library(bis557)
data(ridge_train)
data(ridge_test)
setwd("~/Documents/Yale/BIS557/bis557/vignettes")
library(bis557)
data(ridge_train)
data(ridge_test)
?scale
ridge_train_scale <- as.data.frame(scale(ridge_train))
ridge_test_scale
ridge_test_scale <- as.data.frame((scale(ridge_test)))
ridge_test_scale
ridge_test_scale[, -1]
library(devtools)
library(bis557)
data(ridge_train)
data(ridge_test)
ridge_train_scale <- as.data.frame(scale(ridge_train))
ridge_test_scale <- as.data.frame((scale(ridge_test)))
setwd("~/Documents/Yale/BIS557/bis557/inst")
library(bis557)
data(ridge_train)
data(ridge_test)
ridge_train_scale <- as.data.frame(scale(ridge_train))
ridge_test_scale <- as.data.frame((scale(ridge_test)))
build_vignettes()
install(build_vignettes = TRUE)
library(bis557)
library(bis557)
data(ridge_train)
data(ridge_test)
ridge_train_scale <- as.data.frame(scale(ridge_train))
ridge_test_scale <- as.data.frame((scale(ridge_test)))
mse_ridge_reg <- function(lambda){
fit <- ridge_reg(y ~. - 1, lambda, ridge_train_scale)
y_hat <- tcrossprod(ridge_test_scale[, -1], beta_mat)
mse <- apply((ridge_test_scale[, 1] - y_test)  ^ 2, 2, mean)
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
ncol(ridge_test_scale[, -1])
mse_ridge_reg <- function(lambda){
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- tcrossprod(ridge_test_scale[, -1], beta_mat)
mse[j] <- mse <- apply((ridge_test_scale[, 1] - y_test)  ^ 2, 2, mean)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
mse_ridge_reg <- function(lambda){
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- tcrossprod(ridge_test_scale[, -1], ridge_beta)
mse[j] <- mse <- apply((ridge_test_scale[, 1] - y_test)  ^ 2, 2, mean)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
ridge_beta <- ridge_reg(y ~. - 1, 0.5, ridge_train_scale)
View(ridge_beta)
y_hat <- tcrossprod(ridge_test_scale[, -1], ridge_beta)
ridge_beta$coefficients
mse_ridge_reg <- function(lambda){
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- tcrossprod(ridge_test_scale[, -1], ridge_beta$coefficients)
mse[j] <- mse <- apply((ridge_test_scale[, 1] - y_test)  ^ 2, 2, mean)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
y_hat <- tcrossprod(ridge_test_scale[, -1], ridge_beta$coefficients)
ridge_beta <- ridge_reg(y ~. - 1, 0.5, ridge_train_scale)
ridge_test_scale[, -1]
ridge_beta$coefficients
tcrossprod(ridge_test_scale[, -1], ridge_beta$coefficients)
mse_ridge_reg <- function(formula, lambda, data){
X_test <- model.matrix(formula, data)
y_test <- data[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- tcrossprod(X_test, ridge_beta$coefficients)
mse[j] <- mse <- apply((y_hat - y_test)  ^ 2, 2, mean)
}
}
mse_ridge_reg <- function(formula, lambda){
X_test <- model.matrix(formula, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- tcrossprod(X_test, ridge_beta$coefficients)
mse[j] <- mse <- apply((y_hat - y_test)  ^ 2, 2, mean)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
ridge_beta <- ridge_reg(y ~. - 1, 0.5, ridge_train_scale)
X_test
X_test <- model.matrix(y ~. - 1, ridge_test_scale)
tcrossprod(X_test, ridge_beta$coefficients)
ridge_beta$coefficients %*% X_test
ridge_beta$coefficients
crossprod(ridge_beta$coefficients, X_test)
X_test %*% ridge_beta$coefficients
n <- 200
p <- 4
N <- 500
M <- 20
X_test <- MASS::mvrnorm(n, mu, Sigma)
mu <- rep(0, p)
X_test <- MASS::mvrnorm(n, mu, Sigma)
Sigma <- matrix(0.9, nrow = p, ncol = p)
diag(Sigma) <- 1
X_test <- MASS::mvrnorm(n, mu, Sigma)
mse_ridge_reg <- function(formula, lambda){
X_test <- model.matrix(formula, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- X_test %*% ridge_beta$coefficients
mse[j] <- mse <- apply((y_hat - y_test)  ^ 2, 2, mean)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
ridge_beta <- ridge_reg(y ~. - 1, 0.5, ridge_train_scale)
X_test <- model.matrix(y ~. - 1, ridge_test_scale)
y_hat <- X_test %*% ridge_beta$coefficients
y_test <- ridge_test_scale[, all.vars(y~.-1)[1]]
View(y_hat)
y_test - y_hat
mse_ridge_reg <- function(formula, lambda){
X_test <- model.matrix(formula, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:length(lambda)) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- X_test %*% ridge_beta$coefficients
mse[j] <- mean((y_hat - y_test) ^ 2)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
ridge_beta <- ridge_reg(y ~. - 1, 0.5, ridge_train_scale)
X_test <- model.matrix(y ~. - 1, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(y~.-1)[1]]
y_hat <- X_test %*% ridge_beta$coefficients
mean((y_hat - y_test) ^ 2)
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
length(lambda_vals)
mse_ridge_reg <- function(formula, lambda){
X_test <- model.matrix(formula, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:k) {
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
y_hat <- X_test %*% ridge_beta$coefficients
mse[j] <- mean((y_hat - y_test) ^ 2)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
mse_ridge_reg <- function(formula, lambda){
X_test <- model.matrix(formula, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:k) {
ridge_beta <- ridge_reg(formula, lambda[j], ridge_train_scale)
y_hat <- X_test %*% ridge_beta$coefficients
mse[j] <- mean((y_hat - y_test) ^ 2)
}
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
mse_ridge_reg <- function(formula, lambda){
X_test <- model.matrix(formula, ridge_test_scale)
y_test <- ridge_test_scale[, all.vars(formula)[1]]
k <- length(lambda)
mse <- rep(NA_real_, k)
for (j in 1:k) {
ridge_beta <- ridge_reg(formula, lambda[j], ridge_train_scale)
y_hat <- X_test %*% ridge_beta$coefficients
mse[j] <- mean((y_hat - y_test) ^ 2)
}
return(mse)
}
lambda_vals <- 10 ^ (seq(-2, 5, 0.05))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
plot(mse ~ lambda_vals)
plot(mse ~ lambda_vals, log = "x", pch = 16)
lambda_vals <- 10 ^ (seq(-1, 5, 0.1))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
plot(mse ~ lambda_vals, log = "x", pch = 16)
lambda_vals <- 10 ^ (seq(-1, 5, 0.1))
mse <- mse_ridge_reg(y ~. - 1, lambda_vals)
lambda_optimal <- lambda_vals[which.min(mse)]
cat("The optimal value of lambda is", lambda_optimal, "\n")
plot(mse ~ lambda_vals, log = "x", pch = 16)
plot(mse ~ lambda_vals, log = "xy", pch = 16)
ridge_beta <- ridge_reg(y ~. - 1, lambda[j], ridge_train_scale)
install(build_vignettes = TRUE)
library(bis557)
browseVignettes()
