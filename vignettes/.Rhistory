install.packages("rmarkdown")
library("devtools")
librady("rmarkdown")
library("rmarkdown")
image(volcano, col = viridis(200))
library(viridis)
install.packages("viridis")
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200, option = "A"))
library("rmarkdown")
render("1-example.Rmd")
cd /Users/Guo.Y/Downloads
render("/Users/Guo.Y/Downloads/1-example.Rmd")
3+5
2+5*3
sqrt(2)
3+5
2+5*3
2^5
2^0.5
sqrt(2)
exp(3)
3+5
2+5*3
2^5
2^0.5
sqrt(2)
exp(3)
x <- 3
x
v <- c(3, 5, 2)
v
?seq
v <- seq(1, 5, by = 1)
v
v
v
v
v <- rep("Friday", 7)
v <- seq(2, 50, by = 2)
?sample
v <- sample(1:9, 5, replace = TRUE)
set.seed(230)
v <- sample(1:9, 5, replace = TRUE)
?sample
x <- 1:9
sample(x, 5)
sample(x, 5, replace = TRUE)
x <- 3
v[4]
v[-4]
v[2:5]
v[-1]
v[c(1, 3, 5)]
v+3
v <- v + 3
v
v > 6
v >= 6
v == 6
v > 6 & v < 9
v[v > 6 & v < 9]
which(v > 6 & v < 9) # Returens the indices of the TRUEs
v[which(v > 6 & v < 9)]
mean(v)
var(v)
sd(v)
median(v)
summary(v)
summary(v[v > 5])
# Negate the condition
!(v < 6 | v > 9)
which(!(v < 6 | v > 9))
NYC <- read.csv("https://www.dropbox.com/s/96pz7soxkvo7fp6/nyc.csv?raw=1")
View(NYC)
head(NYC)
tail(NYC)
dim(NYC)
summary(NYC)
NYC[, 2]
NYC$Price
mean(NYC$Price)
NYC[, c(2, 4)]
head(NYC[, c(2, 4)])
NYC[3, ]
NYC[c(3, 9), ]
NYC[3, 2]
NYC[1:3, c(1, 5)]
hist(NYC$Price)
plot(Price ~ Food, data = NYC)
plot(Food ~ Price, data = NYC)
plot(Price ~ jitter(Food), data = NYC)
plot(Price ~ jitter(Food), data = NYC, main = "Average Cost of Meal vs. Food Rating in NYC", ylab = "Price ($)", xlab = "Food Rating (out of 30)")
boxplot(Price ~ East, data = NYC)
plot(Price ~ jitter(Food), col = East + 1, data = NYC, main = "Average Cost of Meal vs. Food Rating in NYC", ylab = "Price ($)", xlab = "Food Rating (out of 30)")
plot(Price ~ jitter(Food), col = East + 1, data = NYC, main = "Average Cost of Meal vs. Food Rating in NYC", ylab = "Price ($)", xlab = "Food Rating (out of 30)", pch = 16)
linear_model <- function(formula, data) {
# lm(formula, data)
X <- model.matrix(formula, data)
y <- data[, all.vars(formula)[1]]
svd_output <- svd(X)
U <- svd_output[["u"]]
Sinv <- diag(1 / svd_output[["d"]])
V <- svd_output[["v"]]
pseudo_inv <- V %*% Sinv %*% t(U)
betahat <- pseudo_inv %*% y
flm <- list()
flm$coefficient <- betahat
class(flm) <- "lm"
return(flm)
}
fit <- linear_model(Sepal.Length ~., iris)
fit2 <- lm(Sepal.Length ~., iris)
fit$coefficient
fit2$coefficients
formula = Sepal.Length ~.
data = iris
formula[1]
all.vars(furmula)
all.vars(formula)
View(fit2)
View(fit)
library(bis557)
fit <- linear_model(Sepal.Length ~., iris)
summary(fit)
setwd("~/Documents/Yale/BIS557/bis557")
library(bis557)
fit <- linear_model(Sepal.Length ~., iris)
summary(fit)
setwd("~/Documents/Yale/BIS557/bis557/vignettes")
library(bis557)
fit <- linear_model(Sepal.Length ~., iris)
summary(fit)
?list
?summary
